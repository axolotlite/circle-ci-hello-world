version: 2.1
executors:
  my-executor:
    docker:
      - image: circleci/node:13.8.0
  my-aws-executor:
      docker:
        - image: amazon/aws-cli
  my-ansible-executor:
    docker:
      - image:  python:3.7-alpine3.11
commands:
  sayhello:
    description: "Are these manditory?"
    parameters:
      to:
        type: string
        default: "Hello World"
    steps:
      - run: echo <<parameters.to>>
  print_pipeline_id:
    description: "Prints the pipeline id for this process"
    parameters:
      to:
        type: string
    steps:
      - run: echo <<parameters.to>>
  return_code:
    description: "returns exit code"
    parameters:
      code:
        type: integer
    steps:
      - run: exit <<parameters.code>>
  install_ansible:
    description: updates the system and install ansible
    steps:
      - run: apk add --update ansible
jobs:
  save_hello_world_output:
    executor: my-executor
    steps:
      - run: echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  print_output_file:
    executor: my-executor
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
  hello_world_command:
    executor: my-executor
    steps:
      - sayhello
  print_pipe_id:
    executor: my-executor
    steps:
      - print_pipeline_id:
          to: "$CIRCLE_WORKFLOW_ID" 
  fail_on_purpose:
    executor: my-executor
    steps:
      - run: "echo this code fails on purpose"
      - return_code:
          code: 1
      - run:
          name: "Failure Report"
          command: echo "Mission Failed Successfully"
          when: on_fail
  succeed_on_purpose:
    executor: my-executor
    steps:
      - run: "echo this code succeeds on purpose"
      - return_code:
          code: 0
      - run:
          name: "Success Report"
          command: echo "Mission Successfully Failed"
          when: on_fail
  create_infrastructure:
    executor: my-aws-executor
    steps:
      - checkout
      - run:
          name: create Cloudformation Stack
          command:  |
            aws cloudformation create-stack \
              --template-body file://template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - run:
          name: await stack completion
          command:
            aws cloudformation wait stack-create-complete --stack-name=myStack-${CIRCLE_WORKFLOW_ID:0:5} --region=us-east-1
      - run: echo "[all]" > ~/inventory
      - run: aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths: 
            - inventory
  configure_infrastructure:
    executor: my-ansible-executor
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "bf:ec:ad:0d:27:83:8c:48:f0:c3:5e:21:32:c4:42:46"
      - install_ansible
      # - run: apk add tar gzip
      # - attach_workspace:
      #     at: ~/
      # - run: ansible-playbook -i inventory main.yml
      - run: sudo ping -c 3 8.8.8.8
      - run: sudo ping -c 3 3.87.42.2
workflows:
  my_workflow:
    jobs:
      - configure_infrastructure
        
          